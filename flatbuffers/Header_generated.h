// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEADER_H_
#define FLATBUFFERS_GENERATED_HEADER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

struct Header;
struct HeaderBuilder;
struct HeaderT;

struct HeaderT : public ::flatbuffers::NativeTable {
  typedef Header TableType;
  uint32_t type = 0;
  uint32_t size = 0;
};

struct Header FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeaderT NativeTableType;
  typedef HeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_SIZE = 6
  };
  uint32_t type() const {
    return GetField<uint32_t>(VT_TYPE, 0);
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_SIZE, 4) &&
           verifier.EndTable();
  }
  HeaderT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HeaderT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Header> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HeaderT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HeaderBuilder {
  typedef Header Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(uint32_t type) {
    fbb_.AddElement<uint32_t>(Header::VT_TYPE, type, 0);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Header::VT_SIZE, size, 0);
  }
  explicit HeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Header> CreateHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t type = 0,
    uint32_t size = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_type(type);
  return builder_.Finish();
}

::flatbuffers::Offset<Header> CreateHeader(::flatbuffers::FlatBufferBuilder &_fbb, const HeaderT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HeaderT *Header::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HeaderT>(new HeaderT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Header::UnPackTo(HeaderT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = type(); _o->type = _e; }
  { auto _e = size(); _o->size = _e; }
}

inline ::flatbuffers::Offset<Header> Header::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HeaderT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHeader(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Header> CreateHeader(::flatbuffers::FlatBufferBuilder &_fbb, const HeaderT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const HeaderT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _type = _o->type;
  auto _size = _o->size;
  return CreateHeader(
      _fbb,
      _type,
      _size);
}

inline const Header *GetHeader(const void *buf) {
  return ::flatbuffers::GetRoot<Header>(buf);
}

inline const Header *GetSizePrefixedHeader(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Header>(buf);
}

inline bool VerifyHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Header>(nullptr);
}

inline bool VerifySizePrefixedHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Header>(nullptr);
}

inline void FinishHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Header> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Header> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<HeaderT> UnPackHeader(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<HeaderT>(GetHeader(buf)->UnPack(res));
}

inline std::unique_ptr<HeaderT> UnPackSizePrefixedHeader(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<HeaderT>(GetSizePrefixedHeader(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_HEADER_H_
